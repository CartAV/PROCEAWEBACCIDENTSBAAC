{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 0,
    "selection": {
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "{\"xsi:nil\":\"true\"}",
            "to": ""
          }
        ],
        "normalization": "EXACT",
        "columns": [],
        "appliesTo": "ALL",
        "stopAfterFirstMatch": false,
        "matching": "SUBSTRING"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "\\[\\{\"facteurPresumeLieu\":\\[?([^\\]]+)\\]?\\}\\]",
            "to": "$1"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "facteursPresumesLieu"
        ],
        "appliesTo": "SINGLE_COLUMN",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "\\{\"xml_text\":\"([^\"]+)\"\\}",
            "to": "$1"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "facteursPresumesLieu"
        ],
        "appliesTo": "ALL",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "\\[(.*)\\]",
            "to": "$1"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "voieIndiceAlpha",
          "pKPR",
          "voieIndiceNum",
          "distanceAuPKPR"
        ],
        "appliesTo": "COLUMNS",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnRenamer",
      "params": {
        "renamings": [
          {
            "from": "categorieRoute",
            "to": "catr"
          },
          {
            "from": "regimeCirculation",
            "to": "circ"
          },
          {
            "from": "voieSpeciale",
            "to": "vosp"
          },
          {
            "from": "profilEnLong",
            "to": "prof"
          },
          {
            "from": "traceEnPlan",
            "to": "plan"
          },
          {
            "from": "etatSurface",
            "to": "surf"
          },
          {
            "from": "amenagementInfra",
            "to": "infra"
          },
          {
            "from": "situationAccident",
            "to": "situ"
          },
          {
            "from": "pKPR",
            "to": "pr"
          },
          {
            "from": "distanceAuPKPR",
            "to": "pr1"
          },
          {
            "from": "nbTotalVoiesCirculation",
            "to": "nbv"
          },
          {
            "from": "voieNumero",
            "to": "voie"
          }
        ]
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "def process(row):\n\n    dic \u003d {\n          \"catr\": {\n            0: \"\",\n            1: \"autoroute\",\n            2: \"route nationale\",\n            3: \"route départementale\",\n            4: \"voie communale\",\n            5: \"hors réseau public\",\n            6: \"parking\",\n            7: \"route de métropole urbaine\",\n            9: \"autre route\"\n          },\n          \"circ\": {\n            0: \"\",\n            1: \"sens unique\",\n            2: \"bidirectionnel\",\n            3: \"chaussées séparées\",\n            4: \"affectation variable\"\n          },\n          \"vosp\": {\n            0: \"\",\n            1: \"piste cyclable\",\n            2: \"banque cyclable\",\n            3: \"voie réservée\"\n          },\n          \"prof\": {\n            0: \"\",\n            1: \"plat\",\n            2: \"pente\",\n            3: \"sommet de côte\",\n            4: \"bas de côte\"\n          },\n          \"plan\": {\n            0: \"\",\n            1: \"rectiligne\",\n            2: \"courbe à gauche\",\n            3: \"courbe à droite\",\n            4: \"en S\"\n          },\n          \"surf\": {\n            0: \"\",\n            1: \"surface normale\",\n            2: \"surface mouillée\",\n            3: \"flaques\",\n            4: \"surface innondée\",\n            5: \"surface enneigée\",\n            6: \"boue\",\n            7: \"surface verglacée\",\n            8: \"corps gras-huile\",\n            9: \"autre surface\"\n          },\n          \"infra\": {\n            0: \"\",\n            1: \"souterrain ou tunnel\",\n            2: \"pont\",\n            3: \"échangeur\",\n            4: \"rails\",\n            5: \"carrefour aménagé\",\n            6: \"zone piétonne\",\n            7: \"zone de péage\"\n          },\n          \"situ\": {\n            0: \"\",\n            1: \"chaussée\",\n            2: \"bande d\u0027arrêt d\u0027urgence\",\n            3: \"accotement\",\n            4: \"trottoir\",\n            5: \"piste cyclable\"\n          }\n        }\n    mapping_errors \u003d list()\n    for key, mapping in dic.items():\n\tv \u003d int(row[key]) if row[key] and row[key].isdigit() else None\n        if v in dic[key]:\n            row[key] \u003d mapping[v]\n\telif v:\n            # unmapped[key].add(row[key])\n            print \u0027Unmapped {}: {}\u0027.format(key, row[key])\n            mapping_errors.append(key + \u0027:\u0027 + row[key])\n    row[\u0027mapping_error\u0027] \u003d \u0027; \u0027.join(mapping_errors) if len(mapping_errors) \u003e 0 else None\n    return row",
        "usePythonUnicode": true
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnsSelector",
      "params": {
        "columns": [
          "xsi:nil"
        ],
        "keep": false,
        "appliesTo": "SINGLE_COLUMN"
      },
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}