{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 0,
    "selection": {
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnRenamer",
      "params": {
        "renamings": [
          {
            "from": "lumiere",
            "to": "lum"
          },
          {
            "from": "intersection",
            "to": "int"
          },
          {
            "from": "localisation",
            "to": "agg"
          },
          {
            "from": "conditionAtmospherique",
            "to": "atm"
          },
          {
            "from": "typeCollision",
            "to": "col"
          },
          {
            "from": "codeCommuneInsee",
            "to": "com"
          },
          {
            "from": "adressePostale",
            "to": "adr"
          }
        ]
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "\\.*\"latitude\":\"(\\-?[0-9]+\\.?[0-9]*)\"\\.*",
            "to": "$1"
          },
          {
            "from": "\\.*\"longitude\":\"(\\-?[0-9]+\\.?[0-9]*)\"\\.*",
            "to": "$1"
          },
          {
            "from": "\\[\\{",
            "to": ""
          },
          {
            "from": "\\}\\]",
            "to": ""
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "coordonneesGeo"
        ],
        "appliesTo": "SINGLE_COLUMN",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": true,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "def process(row):\n\n    dic\u003d {\n      \"lum\": {\n        1: \"plein jour\",\n        2: \"crépuscule ou aube\",\n        3: \"nuit sans éclairage public\",\n        4: \"nuit avec éclairage public non allumé\",\n        5: \"nuit avec éclairage public allumé\"\n          },\n      \"agg\": {\n        1: \"hors agglomération\",\n        2: \"en agglomération\"\n      },\n      \"int\": {\n        1: \"hors intersection\",\n        2: \"intersection en X\",\n        3: \"intersection en T\",\n        4: \"intersection en Y\",\n        5: \"intersection +4 branches\",\n        6: \"giratoire\",\n        7: \"place\",\n        8: \"passage à niveau\",\n        9: \"autre intersection\"\n      },\n      \"atm\": {\n        1: \"météo normale\",\n        2: \"pluie légère\",\n        3: \"pluie forte\",\n        4: \"neige - grêle\",\n        5: \"brouillard - fumée\",\n        6: \"vent fort - tempête\",\n        7: \"temps éblouissant\",\n        8: \"temps couvert\",\n        9: \"autre météo\"\n      },\n      \"col\": {\n        1: \"2 véhicules frontal\",\n        2: \"2 véhicules par l’arrière\",\n        3: \"2 véhicules côté\",\n        4: \"3+ véhicules en chaine\",\n        5: \"3+ véhicules autre\",\n        6: \"autre collision\",\n        7: \"Sans collision\"\n      }\n    }\n    mapping_errors \u003d list()\n    for key, mapping in dic.items():\n\tv \u003d int(row[key]) if row[key] and row[key].isdigit() else None\n        if v in dic[key]:\n            row[key] \u003d mapping[v]\n\telif v:\n            # unmapped[key].add(row[key])\n            print \u0027Unmapped {}: {}\u0027.format(key, row[key])\n            mapping_errors.append(key + \u0027:\u0027 + row[key])\n    row[\u0027mapping_error\u0027] \u003d \u0027; \u0027.join(mapping_errors) if len(mapping_errors) \u003e 0 else None\n    return row",
        "usePythonUnicode": true
      },
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}