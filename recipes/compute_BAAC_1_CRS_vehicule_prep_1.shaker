{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 0,
    "selection": {
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnRenamer",
      "params": {
        "renamings": [
          {
            "from": "sensCirculation",
            "to": "senc"
          },
          {
            "from": "categorieAdmin",
            "to": "catv"
          },
          {
            "from": "obstacleMobileHeurte",
            "to": "obsm"
          },
          {
            "from": "obstacleFixeHeurte",
            "to": "obs"
          },
          {
            "from": "pointChocInitial",
            "to": "choc"
          },
          {
            "from": "manoeuvrePrincipaleAvantAccident",
            "to": "manv"
          },
          {
            "from": "vehiculeSpecial",
            "to": "spev"
          },
          {
            "from": "facteursPresumesVehicule",
            "to": "facv"
          },
          {
            "from": "assurance",
            "to": "assu"
          },
          {
            "from": "appartenantA",
            "to": "prop"
          },
          {
            "from": "nbOccupantsTC",
            "to": "occutc"
          },
          {
            "from": "lettreConventionnelle",
            "to": "num_veh"
          },
          {
            "from": "cNIT",
            "to": "code CNIT"
          },
          {
            "from": "enFuite",
            "to": "Véhicule en fuite"
          },
          {
            "from": "premiereMC",
            "to": "première immat"
          }
        ]
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "# from collections import defaultdict\n\ndef process(row):\n    dic \u003d {\n      \"senc\": {\n        0: \"\",\n        1: \"PK-PR-num rue croissant\",\n        2: \"PK-PR-num rue décroissant\"\n      },\n      \"catv\": {\n        0: \"\",\n        10: \"utilitaire\",\n        11: \"utilitaire+caravane (ref obsolète)\",\n        12: \"utilitaire+remorque (ref obsolète)\",\n        13: \"poids lourd\",\n        14: \"poids lourd\",\n        15: \"poids lourd\",\n        16: \"tracteur\",\n        17: \"tracteur+semi-remorque\",\n        18: \"transport en commun (ref obsolète)\",\n        19: \"tramway (ref obsolète)\",\n        20: \"engin spécial\",\n        21: \"tracteur\",\n        30: \"scooter -50cm3\",\n        31: \"motocyclette +50cm3-125cm3\",\n        33: \"motocyclette +125cm3\",\n        34: \"scooter +125cm3\",\n        35: \"quad -50cm3\",\n        36: \"quad +50cm3\",\n        37: \"bus\",\n        39: \"train\",\n        40: \"tramway\",\n        99: \"autre véhicule\",\n        1: \"bicyclette\",\n        2: \"cyclomoteur -50cm3\",\n        3: \"voiturette\",\n        4: \"scooter immatriculé (ref obsolète)\",\n        5: \"motocyclette (ref obsolète)\",\n        6: \"side-car (ref obsolète)\",\n        7: \"voiture\",\n        8: \"voiture+caravane (ref obsolète)\",\n        9: \"voiture+remorque (ref obsolète)\"\n      },\n      \"obsm\": {\n        0: \"\",\n        1: \"choc piéton\",\n        2: \"choc véhicule\",\n        4: \"choc sur rail\",\n        6: \"choc animal domestique\",\n        9: \"choc autre obstacle mobile\"\n      },\n      \"obs\": {\n        0: \"\",\n        1: \"Véhicule en stationnement\",\n        2: \"Arbre\",\n        3: \"Glissière métallique\",\n        4: \"Glissière béton\",\n        5: \"Autre glissière\",\n        6: \"Bâtiment, mur, pile de pont\",\n        7: \"Support de signalisation verticale ou poste d’appel d’urgence\",\n        8: \"Poteau\",\n        9: \"Mobilier urbain\",\n        10: \"Parapet\",\n        11: \"Ilot, refuge, borne haute\",\n        12: \"Bordure de trottoir\",\n        13: \"Fossé, talus, paroi rocheuse\",\n        14: \"Autre obstacle fixe sur chaussée\",\n        15: \"Autre obstacle fixe sur trottoir ou accotement\",\n        16: \"Sortie de chaussée sans obtacle\"\n      },\n      \"choc\": {\n        0: \"\",\n        1: \"avant\",\n        2: \"avant droit\",\n        3: \"avant gauche\",\n        4: \"arrière\",\n        5: \"arrière droit\",\n        6: \"arrière gauche\",\n        7: \"côté droit\",\n        8: \"côté gauche\",\n        9: \"multiples\"\n      },\n      \"manv\": {\n        0: \"\",\n        1: \"sans changement de direction\",\n        2: \"même sens, même file\",\n        3: \"entre 2 files\",\n        4: \"en marche arrière\",\n        5: \"à contresens\",\n        6: \"en franchissant le terre-plein central\",\n        7: \"dans le couloir bus, dans le même sens\",\n        8: \"dans le couloir bus, dans le sens inverse\",\n        9: \"en s’insérant\",\n        10: \"en faisant demi-tour sur la chaussée\",\n        11: \"changeant de file à gauche\",\n        12: \"changeant de file à droite\",\n        13: \"déporté à gauche\",\n        14: \"déporté à droite\",\n        15: \"tournant à gauche\",\n        16: \"tournant à droite\",\n        17: \"tournant à gauche\",\n        18: \"tournant à droite\",\n        19: \"traversant la chaussée\",\n        20: \"manoeuvre de stationnement\",\n        21: \"manoeuvre d’évitement\",\n        22: \"ouverture de porte\",\n        23: \"arrêté non stationné\",\n        24: \"stationné\"\n      },\n      \"prop\": {\n          0: \"\",\n          1: \"conducteur\",\n          2: \"véhicule volé\",\n          3: \"propriétaire consentant\",\n          4: \"administration\",\n          5: \"entreprise\"\n      },\n      \"spev\": {\n          0: \"\",\n          1: \"taxi\",\n          2: \"ambulance\",\n          3: \"pompiers\",\n          4: \"police - gendarmerie\",\n          5: \"transports scolaires\",\n          6: \"matières dangereuses\",\n          9: \"autres\"\n      },\n      \"assu\": {\n          0: \"\",\n          1: \"oui\",\n          2: \"non\",\n          3: \"non présentation\"\n      },\n      \"facv\": {\n          0: \"\",\n          1: \"défectuosité mécanique\",\n          2: \"éclairage - signalisation\",\n          3: \"pneu usé\",\n          4: \"éclatement de pneu\",\n          5: \"chargement\",\n          6: \"déplacement du véhicule\",\n          7: \"incendie du véhicule\",\n          9: \"autre\"\n      }   \n    }\n    # unmapped \u003d defaultdict(set)\n    mapping_errors \u003d list()\n    for key, mapping in dic.items():\n\tv \u003d int(row[key]) if row[key] and row[key].isdigit() else None\n        if v in dic[key]:\n            row[key] \u003d mapping[v]\n\telif v:\n            # unmapped[key].add(row[key])\n            print \u0027Unmapped {}: {}\u0027.format(key, row[key])\n            mapping_errors.append(key + \u0027:\u0027 + row[key])\n    row[\u0027mapping_error\u0027] \u003d \u0027; \u0027.join(mapping_errors) if len(mapping_errors) \u003e 0 else None\n    return row\n",
        "usePythonUnicode": true
      },
      "alwaysShowComment": false
    },
    {
      "preview": true,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnCopier",
      "params": {
        "outputColumn": "Num_Acc",
        "inputColumn": "IdTechniqueFO"
      },
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}